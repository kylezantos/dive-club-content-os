# Dive Club Interview: Andrei Herasimchuk
## Episode Notes
**Host:** Ridd  
**Guest:** Andrei Herasimchuk (Former Adobe Design Director, Selden Co-founder)  
**Topics:** Adobe Journey, Design Tools Evolution, Figma Founding Story, Selden Startup  

---

Ridd (01:26.071)
What's the day one story at Adobe?

Andrei Herasimchuk (01:26.071)
Well, the day one story was in 1995. I was working at a company in Massachusetts, the first company I worked with. It was a bunch of startups, kind of doing a startup back in the days of computer graphics when it wasn't cool to do so. But anyway, I got my job and I promptly drove all the way across the country from Massachusetts, which is where I was, all the way to Mountain View, California. On the way, I visited my parents back in Houston and that was kind of part of the road trip. So I had driven for two weeks because I took the whole slow time going across the country.

And I arrived at Adobe, I want to say September 1st. It was like the first day of either August or September, one of the two. And I showed up at like seven in the morning because I was asked to show up at seven in the morning. I was like, boy, I had just gotten into Mountain View the night before. So I was exhausted from driving all kinds of stuff. And I show up and I get to the office and I check in. This was a, so a lot of people don't know this per se, but Adobe used to be at that time in the same buildings that Google is in now in Mountain View. So there's a set of buildings that where Google are at anyway. So I drove into the parking lot of building C building E at the time, went in.

Ask the person, the admin there, like, hey, my name's Andre. I'm here for my first day. I'm looking for Brian Lampkin. He was going to be my manager. Brian at the time was the group product manager for Photoshop. And he had a small team of product managers, John Letty and Lisa Cleary.

Andrei Herasimchuk (02:57.587)
I walked in, Brian is notorious for having morning meetings. He does these meetings at like 7.30, 8 o'clock all the time with his team. I was just like, this is not going to be fun. But we showed up and he said, hang on a second, Andre. He introduced me around to the table. We start talking. And he's like, OK, look.

Meeting's over, let's go introduce you to the team. I was like, okay, so it's like now it's like 8.30 in the morning. We get up and we start walking across. If you know these buildings in Mountain View, there's like four or five of them. We were building E, we were going to building C. Building C is actually where I think these days the Android team for Google does all their work. So we walk across Mountain View, this parking lot, go to the buildings.

Brian walks in, I've got the visitor badge, I haven't got my real badge yet, and we walk into this meeting and there's a meeting happening for this engineering team. It's like nine o'clock now, they're just starting their day and there's, I don't know, a good 15 people sitting around the table. It turns out this was the Illustrator engineering team meeting.

Along the way across the parking lot, Brian's like, hey, Andre, we had a slight hiccup. We're going to change up the Dave rule at first, but I want you to know that not only are have you working on Photoshop, like we said, we want you to also work on Illustrator and then in the future on PageMaker, which then became InDesign. But rather than having you start on Photoshop, there's some things going on that I need to have you actually start with the Illustrator team. And this is while we're walking. And as we're into this room of engineers, he's telling me this. And I was just kind of like, boy, okay. I had heard rumors from my friends and people in the industry that the Illustrator team was notoriously picky and notoriously kind of like they were really a different kind of team than the Photoshop team. I had actually known the Photoshop engineers at this point.

We walk in, he opens this glass door, and everybody in the room just gets quiet. Now first off, part of the story is that Brian is six foot seven, six foot eight. He's a tall guy, he's a really big guy. He walks in and he's got a booming voice. He's like, hey everybody, how's it going? Good morning. And everybody's like, hi Brian. And one of the engineers goes, what do you need? And then Brian goes, hey look folks.

Andrei Herasimchuk (05:02.293)
I just wanted you to meet Andre. He's our new interface designer that's joining us here at Adobe. And just want to let you know that Andre is going be helping you with the next release of Illustrator. Andre, this is the team. I have to go to another meeting, but I'll be right back in about an hour or two to come pick you up. Everybody, bring Andre on board. I'll talk to you later. And he walks out. And I am standing there looking at these engineers and people, and they all looked at me. It was like a good 30 seconds of silence, I think.

And one of them finally goes, what's your name and what are you doing again? I was just like, crap, this is not good. Brian donned me off into the Illustrator engineering meeting and had not told him that I was coming on board. And I was like, my name's Andre. And then I sat down on one of the empty chairs and I just was quiet the entire meeting. And that was my first, like literally first couple hours at Adobe. And I was floored. I was like, boy.

In for a ride, but yeah, that's how I got started. That was my first day. When I tell the story, Brian Lampkin, by the way, he and I are still friends and whatnot. He just loves to laugh about that because he remembers that. He was throwing me into the proverbial ocean, as they like to say. And yeah, to see how I would do. Yeah, that was my first day, Crazy.

---

Ridd (06:15.836)
Where was Illustrator even at in the product journey right now? In those first months, what were you even working on?

Andrei Herasimchuk (06:20.063)
So they had, yeah, so Illustrator was about to ship version 6 or 6.5. So Photoshop had just finished 3 and layers were a thing, but layers were done in a way that weren't fully vetted or not fully vetted, they weren't fully implemented in a way that they needed to be. So we were, I was coming in to actually start on Photoshop 4 effectively. And Illustrator was about to get into version 7.

It was either version seven or eight. I think it was seven. And Brian needed me to kind of like get to know the Illustrator team because the whole strategy of like, we're going to put all these products in a box. If you look back at the products back then, Illustrator, PageMaker, InDesign, excuse me, not PageMaker, Photoshop, Illustrator, PageMaker, looked nothing like each other. They were, they behaved differently. They had different interactions, different keyboard commands, different palette layouts, different dialogues, like different everything. And I was brought on board because part of the strategy was like, they needed somebody who could do the design of the software with engineers, specifically because the strategy was to go to put them in a box. Like, and to put them in a box, you kind of like what, wanted what Microsoft had done to that point, which is start to solidify at least common interactions, common behaviors, common approaches.

The Illustrator team kind of knew that, but they didn't think they were gonna have to do that sooner. So when I joined on, it was just kind of like, the Photoshop team was in the middle of some bug releases and some other stuff, so I couldn't help them immediately.

It was kind of like a way to introduce me to the Illustrator team and start to get to know them because I knew the Photoshop team really well. I had been interacting with the Photoshop engineers over the past two, the previous two years to that point at conferences and just, just all kinds of things where I just knew, knew, knew the folks on the team. So it was kind of like I needed to get to know the Illustrator team, get to know how they think, how they did some stuff and start to then propose ways of doing these things. But not everybody at Adobe was fully on board with that strategy. It was like, why are we doing this? This is crazy. Every product should just be only about itself and that's how that works. And that was not the point. The point was that we were going to make this thing work because people used Photoshop. They use a pixel editor, a vector editor and a layout editor together. And so that's how we had to to that was the new strategy and that's what we're going to work on. So yeah, at that time I had to get to know the teams. It was really about getting to know people.

Andrei Herasimchuk (08:40.887)
I was the first interface designer, so they had lots of designers at the time that did things like the packaging and the manuals, but I was the first one hired literally and they actually had to make a new thing in the HR book for me. That was, I'm a designer, but I'm working in the engineering group, working on building the products. All the interface design at that point at Adobe had been done very informally by lots of various different people. Russell Brown used to help out the Photoshop team quite a bit, he still does obviously, did through his entire time there. You had Luann Cohen who was helping out the illustrator team. There's all kinds of folks internally that were like designers and very well known designers too, that were helping the teams out more on an informal basis. My job was to get in there and actually make it like, you know, this is how these things have to behave and work. And I had to reconcile the three main products to be able to be put in a box together. PageMaker obviously became InDesign, whereas PageMaker had become a legacy product at that point and they were working on a new version at that time. So that's a whole other story.

---

Ridd (09:39.503)
You wrote about how a big part of being a designer is solving puzzles. You know, nowadays there's so much precedent for what a design tool should be. But when you were first getting started at Adobe, like what were some of those early puzzles that you were solving for the first time?

Andrei Herasimchuk (09:55.431)
Well, that was the obvious ones were the ones you probably people see and interact with right now. So, for example, keyboard shortcuts. That's a that was a puzzle. So I literally had spreadsheets and printouts of every keyboard shortcut for PageMaker, Illustrator and Photoshop. And the first thing to do is kind of reconcile what I would say are the obvious ones. The obvious ones on the Macintosh at the time were simple. Command, copy and paste. That's like that's a Macintosh thing. It's not an Adobe thing. So that's clearly going to be Command X, Command V, Command C. 

But then you get into like normal things like arrangements. So bring to front, send to back, you know, up and down. Those were different between the three products, but changing those around was, you know, going to, you know, interrupt some people's flow, but relearning them would be easy because then once you learned how to do it, it would then work the same in all three products if you were using all of them at the same time or in conjunction with each other. The hard ones were the ones that were the ones that people thought of the product and it of becomes so ingrained in their mnemonic and their kind of like flow and behavior that changing it was just like not going to happen.

So the easiest example I could bring up of that was like command D. So command D is on the American keyboard, the D is like where your thumb is and so either your pinky and finger or your thumb and finger. It's a very often used, you know, kind of golden shortcut.

So in Photoshop, command D meant deselect. I think it still does mean deselect. In Illustrator, it means duplicate. Syncton means copy it. And in PageMaker and InDesign, at the time they were doing the design, it meant place. Because you often place text or would, placing was like a thing that you did all the time. I pushed on trying to make those the same, and I suddenly realized that there's only so much of the puzzle you can do before you actually wind up breaking it. So that was one of those ones where, why don't we make that the same? Well, the answer was that the people at the time, the audience at the time, the customers at the time revolted. So we tried to make them the same. And literally it was just like, no, if you do this, I'm going to find somebody and hurt them. It's like, okay, we'll stop. So we had to push a lot of different ways. And that's where we ran into those issues. 

The more puzzle-like ones, which were more fun, which were brand new, for example, were like Free Transform. So Free Transform, I think I've written about before.

Andrei Herasimchuk (12:19.743)
At one point, but free transform is a great one because basically you have in Photoshop at the time you had no way to doing object oriented style transformations like you did in something like an Illustrator or even these days and other products. Meaning that you couldn't skew or rotate or resize and a layer like an object easily. And one of the reasons why people don't know that you couldn't do that in Photoshop was because the way that you resize or transform pixels if you stamp it down, you kind of flatten the math and you kind of create a result. If you do that and do that again and then do it again and then do it again and then do it again, it's the effect of recording something to tape and then re-recording it on another microphone and then re-recording that on another microphone. And you get this kind of loss of data effect that occurs. So in Photoshop, it was like, we need a way to transform things that are object oriented. People, and this is like 1995, know, so people, they went over the objects like they do in Illustrator or in other products as well.

How do you solve the problem of making these objects do these things? And Mark Hamburg and I took an afternoon off and I went to his house actually. And we sat down and we just worked this like a puzzle. We wrote all the transforms on a board in his house. He has whiteboards and stuff at his house. And things like skew, distort, resize, rotate, et cetera. All the standard transforms.

And then we wrote down all the keyboard commands that we have that we could do this with, know, the shift key, the command key, the option key, et cetera, the mouse, mouse up, mouse down, all the kind of inputs. And we kind of made a little bit of a matrix and we said, what can we assign these things to? And we just work through the problem of the easy ones. Yeah. Well, you grab a corner, you resize. If you click outside the bounding thing, you can rotate. But you to be in a mode to do that, which is why it's called free transform mode. And you have to go into like this mode to apply it at the end. And the reason why you have to apply it at the end is because you do all the work and then when you apply, it's only doing one transformation to do the calculation rather than doing multiple steps and getting loss. And so yeah, you sit there and you do that and you suddenly realize, well, if we hold down the option key to like mirror, which is a standard Mac thing, we can actually make it so that if you're distorting the corner, the option key plus the shift key will create a skew effect. And so that's how we get skew. It's like you have to do these kinds of things. Now, free transform is one of those things that...

Andrei Herasimchuk (14:36.203)
You have to learn how to use, you have to know that it's there. It's not like an obvious thing. A newcomer would know these things, but it did solve the problem of how do you do all these transformations in one fell swoop in a pixel based product that's layers so that only one transformation occurs and you get the least amount of loss possible resampling your pixels. I know a lot of people out there who criticize that kind of stuff in this business and they can criticize it all they want to, but it solved the problem. The problem was you know, how do you do all the transforms with the least amount of loss as possible? Is it obvious? Not everything needs to be obvious all the time. And sometimes in our tools, you have to make decisions where you're doing something that is actually has more integrity for the data and more integrity for the overall flow than what seems to be obvious. And I'm not going to make any large comparisons to other products I've worked on. And I actually don't mean creative tools. I mean more like in the social media space where you kinda sometimes need things to be worked at. People need to learn them, because if you make everything too easy, you also make it too easy for people to abuse things. In the world of pixels, know, abusing pixels just makes it look muddier. In the world of other kinds of software, know, abuse can rear its head in other unfortunate ways.

---

Ridd (15:58.382)
It's a, I got a smile on my face thinking about just how many different tools nowadays are derivatives from that whiteboarding session where you're figuring out all of the different pairings and keyboard shortcuts for the first time.

Andrei Herasimchuk (16:11.613)
Yeah, that stuff is fun. I got very lucky early in my career. I got to work on that stuff before it was the big thing, which is good and bad. But yeah, there was no precedent for some of the solutions like that one. And you just solve a puzzle. And we knew it worked because I was using it after we did that. And we were testing it with alpha testers. And we knew it worked. But we just knew that you needed to learn it. And that's not the best thing. But it still worked.

---

Ridd (16:40.268)
Can you talk a little bit about how you arrived at what the visual language should be to tie these three products together?

Andrei Herasimchuk (16:48.453)
That's actually an easy one. That was the easiest part of the whole thing. So I joined Adobe when the products had already had some life. Like Illustrator had started with Illustrator 1, which was 1987, and had already gone through six iterations by the time I joined. The problem with Illustrator is that was that, well, the problem with all the products is that they didn't have a consistent approach on both platforms, Mac and Windows at the time.

Photoshop even had a Unix version. I think it was running on Sun Microsystems, a Sun computer at the time. So they even had a Unix version back in Photoshop too. So with that, you get a lot of features. You get some maturity of the way the tools were working, but they were all inconsistent. Well, let's put everything on the table. Me being me, so I always qualify this by saying when I joined Adobe, I was what your classic designer at the time was between like the 1990s to 1995. The classic designer at the time, and I'm sure a of people will remember this, was you use Photoshop for pixels, you use Freehand for vectors, and you use QuarkXPress for layout. I was one of those kids. I was a Photoshop, Freehand, QuarkXPress kid. So when I joined Adobe, I was first told, I think by Brian actually, he's like, yeah, you're not using Freehand or Quark. And I was like, okay, yes sir, got it.

It's just like, it just doesn't look good and it's not a good idea. I'm like, yeah, I understand. So, but I had the benefit of knowing the knowledge of those as well. So you take all the tools, this case, Illustrator, Freehand, Quark, PageMaker, the stuff they were doing at InDesign, which still had not been released yet, Photoshop and some of its competitors, and you lay it all out. And then because Adobe had Illustrator and Photoshop had had some maturity there, and when they bought PageMaker. PageMaker had been around since 1986. I remember using that in high school to do all kinds of things back in 1986. There was enough maturity around these products that you could know what people liked, what they identified with, what they resonated with, and you just kind of knew at least a good start of what people liked and wanted. Start there. Take those things from all of them. What you don't do is you don't take it only from one. You have to actually sample it from all of them. And that's what I did.

Andrei Herasimchuk (19:03.479)
We've got all these tools, we've got all this stuff going on. I'm just going to take the best. We'll worry about the other stuff later, but let's just start with the best. So for example, one of the things that everybody loved at the time was tab palettes in Photoshop. Tab palettes were like the biggest thing. They were done by guy named Kevin Johnston and the Photoshop team in 1993, 1994. They were a new paradigm convention on the Mac. There was like nothing like it really anywhere and they worked wonderfully. Now they're kind of the bane of existence because everything in all the Adobe suite is like new feature. Put a tab palette for it. New feature, let's put a tab palette for it. So now there's like, there's too many, but you know, back at the time it was great. Start there. Once you have tab palettes, you now have a constraint. How do we put all these things into tab palettes? How do we take these things in dialogues and make them into palettes? So now you have, and the idea is that tab palettes kind of need to be uniform in presentation to some degree so you can stack them. Cause if you don't, then you get all this kind of crazy, stupid behavior. Well, you start there. Go to Illustrator. Well, Illustrator's layers palette was far more advanced than Photoshop's layers palette was at the time. So I started to see link stuff out of that.

And by the way, the teams at Adobe did not like this. They were like, I don't want to do this the way that the other product does. And it was more just a familiarity thing. They didn't want to like have to deal with it. But I was like stealing all the good stuff from all the products and putting them into like this notion of a kind of a design framework. And yeah, that was the easy part. The hard part was the nitty gritty stuff, getting into the details about how certain things worked and behaved.

The kind of identity of the products, they needed to be uniform, but not so uniform that they were, I there was a point where the price became so uniform, people were like, why isn't this just one product? There's a lot of technical reasons why that's not the case. But also there was a problem that sometimes people would be trying to do something and they forgot that they were in Photoshop, not in Illustrator when we were doing testing. And it was like, you know, so you kind of want some differentiation. And you know, we made some decisions that looking back on it, we're probably too aggressive.

Andrei Herasimchuk (20:59.415)
And we made some decisions that were probably not aggressive enough. I tend to think we probably, I know, and I say we, I actually mean me, because I was the one really driving these decisions across the teams. I was gung ho. was like, this is what I was, this was going to happen. So I was probably more aggressive then than I would be today. I would probably be a little bit more nuanced in some of the decisions today. But yeah, it's like, you're in a company like Adobe, it's got all these great tools. I say this to all the design teams that I work with and manage now. It's like, start with the good stuff. Just start with the stuff that people like. That's easy. When you start from there, then, you know, if you constantly trying to reinvent the wheel all the time or reinvent everything all the time, I think you're going to get, I don't know, you're going get lucky when it happens and you're not going to why, or you're just going to create yourself a lot of tension and headache that is just unnecessary in the business. Like the job is fun. Don't, don't make it harder for yourself unnecessarily.

---

Ridd (21:50.718)
What do you have to do to get momentum behind these ideas, especially as the only designer and you're kind of pulling whole teams out of their comfort zone and way of doing things.

Andrei Herasimchuk (21:59.561)
Yeah, this is, yeah, that's a good question. This is something that I have not seen change in 30 years, personally. This has been the case no matter where I've been. If the executive team is not on board, there's just nothing's going to happen. So I've been at companies where the executive team has been on board, like Adobe, and I've been at places where the executive team was not on board. I'm not going to name those because I don't want to throw shade.

You need somebody at the top who's making sure the company understands that this is not just, this is not just something we think is a good idea. It's like, this is a business thing we're going to do. This is going to be, there's, there's going to be a future and a vision behind this because when you make large, large changes, it's, very difficult on your audience, especially when you have existing products. eBay was notorious for having this problem. They would want to change and redesign the homepage or do all kinds of stuff, but they couldn't because every time they change one little thing, the audience would scream.

And then the executive would be like, okay, but you know, roll back. We'll just roll it back. You see this when people do brand redesigns, they do a brand redesign and then everybody flips out on them and they roll it back. You shouldn't even, you should not even get into the idea of doing a brand redesign unless the executive team is on board. And there's a really good reason for it at Adobe. It was, we need to make our product available wherever people are. We are not going to be Mac snobs. So we are going to make sure the product does work for people who have windows machines. We are going to make sure the product works in Japan and Brazil and Africa. And therefore it has to work in all the different languages, which means the design has to be malleable enough that it can accommodate different language sets like Germans, long words. And when you get into that kind of thing, there's a lot of difficult things that have to be done to the degree that the people in the trenches will be arguing a lot with each other. But if they're arguing with each other and the executive team is not really on board with it, you're going get a lot of thrashing and a lot of bad decisions and then a lot of just unhappy people who are going to burn out and just be fighting with each other necessarily.

We had a lot of arguing at Adobe, but the argument was in the, this is, have to do this. How do we solve this problem? How do we solve this problem for people as well as for us as a company? What are we doing here? And yeah, when we released the changes to Photoshop, Illustrator, and then later InDesign, InDesign was third. So InDesign had some grumpiness from people who use PageMaker, but it had set...

Andrei Herasimchuk (24:22.551)
It had a set precedent in Photoshop and Illustrator. So people saw the pattern at that point and they're like, okay, I'm gonna give this a chance. Illustrator was the first one out of the gate with the changes. Photoshop was second, ironically, and the Illustrator audience was not happy. They were quite pissed because as far as they were concerned, they just saw everything got changed for no reason. Because we weren't shipping them all at the same time. We were shipping them as they got finished. And back in those days, you finished on like 14 to 16 month cycles.

So it was another nine months before Photoshop came out with the changes that then started to match. But even then you've only got two of the three. So you're still like, is this really happening? So to give credit to the Adobe folks, the executives, they had the stomach. They knew what they wanted and they knew it was going be tough. And you saw that actually when they switched over to Creative Cloud, you know, a lot of people don't like it. And there's reasons why, you know, maybe it's not good or it is good, but the executive team has to be in on it. So my thing for designers, yeah, is that if you want something to happen, if you want to do it yourself or you want to push the executive team, you got to have a lot of patience and a really good ability to tell stories. But it has to be based in business. It has to be based in solving customer problems. For us, the customer problem was people are using Photoshop and Illustrator together. How do we make their lives easier, even though the switching of that initially is going to feel painful for whichever one you were using at the time until you started getting used to it. I can't find anybody today who remembers how Illustrator really worth it. I people watching this, there'll be a few probably responding to comments like, I remember, you I hate the way you changed it. Like, well, okay, I get that. But generally speaking, you know, a lot of people have no idea how Photoshop used to work anymore or how Illustrator used to work before. And a lot of the stuff that we did, it wasn't just me, it was me and the teams. Lots of we did is still in the products, for better or worse. You know, it's still there. So yeah, you got to get executives. If you don't get somebody above who, who is really gonna drive the need for change. It's just gonna, you're gonna have a lot of smart people arguing with each other and that makes nobody happy. That doesn't do anything for anybody.

---

Ridd (26:29.384)
Let's jump ahead a little bit in your tooling adventure. Can you tell us the story of how you wound up at Figma and what did you see that convinced you that it was worth spending some time on?

Andrei Herasimchuk (26:36.491)
Yeah, so I just left Twitter and I had been doing a whole stint at Yahoo and Twitter where I was the director of design and at Twitter I was reporting to Jack and doing some stuff. Both Twitter and Yahoo were exhausting. They were for different reasons. Yahoo was going through a bad run, but I got to help the team really rebuild and modernize a lot of the tools and stuff inside. Twitter was exhausting because I got there, I was like employee number 272 or something. It was like under 300 people still.

This is seven years into the company's existence. And the design team was roughly 10 or 11. I was either 11 or 12. But anyway, I got there two different problems. It was very exhausting. So I helped Twitter solve this problem. I helped Yahoo solve the problem. And then that was like a four year, five year stint of just mental exhaustion. And so when I parted ways with Twitter, I was taking a break and trying to figure out what to do. And a friend of mine, Michael Abbott, who had been the VP of engineering at Twitter and one of the guys who helped recruit me. I said wanted to grab coffee with him and he was at Kleiner Perkins as a partner at that point. And he invited me have coffee. It was in December of 2012, I think. was in December. I'm almost positive it was December. I show up to grab coffee with Mike and it turns out I think Mike sabotaged me and he did this on purpose. This is like classic Mike. So we're having, I'm sitting in Mike's office at Kleiner Perkins on Sanddale Road, just kind of chatting and talking and seeing what just you know just catching up basically and in walks Dylan and Evan so Dylan Field and Evan Wallace and you know what Dylan was 21 or 22 at the time and Evan I think was 23 or 24 at the time this is 2012 so they can tell you how old they were but they walked in and Mike goes hey Dylan glad you're here I want to introduce you to Andre I'm like great this is a setup

Andrei Herasimchuk (28:32.374)
It turns out, so anyway, Mike's like, you know, introduces me. I worked on Photoshop. I just come out on my gig at Twitter, blah, blah, blah. And I was like, hey, how you guys doing? It's nice to meet you. Like, again, this is like a normal little office. And I looked at Dylan. I said, well, what are you guys working on? And Dylan, without like flinching, looked straight at me in the face and says, we're going to build Photoshop in a web browser. And I laughed. I was just like, ha, ha, sure kid. Yeah.

Right. And he was like, no, no, no, we're going to build Photoshop in a browser. You want to see? And I'm like, OK, show me. I'm like literally like this is nuts. OK, what are you talking about? And so Evan pulled out his laptop and they showed me the demo that I think if you look online, they have this demo somewhere. It's like it's got the ball in the water and a bunch of other photo replacement kinds of things and whatnot. And as we're looking through the demo, I'm kind of watching this and kind of then start asking Evan some questions. Evan's the engineer, Dylan's like the creative business. The type and, started asking some questions and it suddenly dawned on me. Like, you're not building Photoshop on a web browser. You're building Photoshop in GL. That I get that. was like thinking to myself going, I see what you're doing. You're banking on GL being in all the web browsers. And they're like, yes, exactly. Because, you know, when you talk about GL, GL at the time, but it had been just kind of, it kind of like had risen from the ashes, if you will, because of mobile effectively.

A lot of people don't know that, you know, GL as a graphics library and OpenGL being kind of like a drawing kit made it so that mobile could do all kinds of cool things. And I was like, okay, well, I totally get that. And then they're like, can you help us with some ideas? I'm like, yeah, sure. So we went away a couple of weeks later to a meeting room and some whiteboards started just iterating some ideas. And I was like, these two kids know what they're talking about. And I'm going to say kids because they were like 21 and 23 at the time. And I was older.

So to me that to me they were still kids. They were they were young adults I'll say it that way but they they clearly knew what they were talking about and Evan was probably the one of the smartest guys I had interacted with about computer graphics that since Thomas Knoll like Thomas Knoll who wrote Photoshop and Evan or have a lot of same characteristics they think a lot along the same lines and you could tell Evan had been living and breathing pixels and computer graphics since he was like four or something like that

Andrei Herasimchuk (30:57.894)
And Dylan was just like energetic and all these great ideas and things. I said, look guys, you know, here's the deal. I'm taking a break. I am actually not looking to join a company where I'm the president or I would love to find a gig where can just actually be a designer again. I had just come off like Twitter and Yahoo, being a director of design, all the stress and politics and all this other stuff I don't like. I'm looking for something that I can be a designer again. You guys raise the money, come find me and we'll talk. And then like, absolutely. And so.

They went away for like five months and five months later they came back and said, hey, Andre, we got 5 million. You want to join us? And I was like, you guys raised $5 million? What? I was like, wait a second, timeout, explain this to me. And yeah, they had raised $5 million. I think it was from Index at the time. think was Index was the main one. And it was one of Index's big scores, obviously. And so yeah, I was like, sure, I'll join. Let's do this. And I became the first employee and we found like a Regis office in Palo Alto.

Like of those rental offices like before we work. And we had this tiny little space where this me, older guy and these, two young college kids, you know, college aged kids were just planning out the first things, first parts of Figma. And so I helped them do, I helped Evan build the pen tool and do some ideas there. We went through a lot of ideas and I was kind of going down a route more professional, more Photoshop tooling like, because that's, that's my thing.

I think Dylan wanted to have it be a little bit more friendly, you know, that's a little bit tougher, but also just to be straightforward with it. Dylan always had the idea about community, always had the idea about this is going to be for everybody. We, know, the democratized design was something he told me in that first meeting in Kleiner Perkins. so that was always the thing. Cause he actually, I think understood that better than most. He understood like the power of Google docs in a web browser and collaborative and all that kind of stuff. And so that's what he was going for.

But we parted ways after about a year or two and I was just moving on. But yeah, that's how I met those guys. And I literally laughed out loud when they said, we're going to build Photoshop on web browser. And then promptly helped them. So yeah, it obviously wanted to be more than Photoshop. It wanted to be more of an object oriented graphics tool than just a pure painting tool. I'm actually still wondering when they're going to put the painting stuff back in. They had a lot of great painting features that are missing from Figma. shouldn't probably say that loud, but whatever, I don't care. You know, I'm still surprised that that stuff hasn't found its way back in. It does complicate the UI a lot. It does get into this notions of stuff that would potentially make the audience too niche because you need to know how to control those things in order for it to work with things like autoflow and other rendering pipeline stuff. So I don't know, you'd have to ask them, not me.

---

Ridd (33:43.493)
All right, so then let's zoom out because you're coming full circle here and starting another design tool company. So talk to us about what you see in the broader landscape for tooling right now. And specifically, like what's the opportunity that led you to be like, yeah, let's, let's, I'm to start it. I'm going to build something from scratch again.

Andrei Herasimchuk (34:02.198)
Yeah, so this is, I'll try to describe this because I've got some, I'm doing a talk next year where I'm going to also turn this into more of a presentation. I'm just going to go over what my experience has been, whether my experience is the correct experience or not is that's for you to decide, not for me to decide. And by you, I mean you and the audience. I've been lucky enough and I'm old enough to have started when all of this kind of really started. So for example, I was in just started high school when the Macintosh came out. And so the Macintosh, you know, kind of brought pixels and GUIs, graphical user interfaces and mice to more mainstream. Like the GUI had been done at Xerox a few years before that. The mouse had been around for a decade, et cetera. But the Macintosh really kind of consolidated these pieces into a nice package to use. And so I went through the pixel era, the pixel era, as I like to call it. So the pixel era was like, Mac Paint Pro and Pixel Paint Pro and Super Paint 8. Like you had eight colors to choose from that you could paint with. It was, you know, and then you had Super Paint 32, which was like 32-bit color. actually Super Paint 8 was 8-bit color. But anyway, the point is like you had pixels and they could do a limited set of things. So you can make them colors, you could paint over them, you could like, you know, blend them together like you were smudging with your thumb. You could do all this kinds of stuff, but effectively there was just a layer of pixels. And so that kind of went from like the 80s into the early 90s.

Fractal Painter, in my opinion, was like the epitome of the painting tools, the pixel-based tools. After that, so Photoshop came out in February of 1990, and Photoshop started off as a pixel tool, effectively, just in pixels. But at the time, computer graphics was maturing now. And so we actually had an understanding of more stuff. If you looked at high-end systems, and by high-end I mean like systems that cost $30,000, had special hardware to do things with for movies and television.

You had the beginnings of all the kinds of things you needed, which was like layering. So you go from pixels and pixels kind of cap out in their ability to what they can do. So the next thing was layers. And so Photoshop ships and then by Photoshop three, we get layers happening in the mainstream. And so layers allow another level of functionality and ability to do things. Not least of which is blend modes. You can blend pixels together. You have transparency. You can slide things around so that they're fixed. So you don't have to like be dumb. Make a decision and stamp it down. There's all kinds of things you can do with layers that you couldn't do with just a flat grid of pixels. So that goes along and that's serving us really well. In the internet age, when you look at the 90s with the internet, a lot of old websites really abused this notion of layers and blending and pixels and you got all this crazy stuff happening back in the day. So yeah, so you get to layers. Now layers go a while. If you notice that a lot of the painting tools could not do what layers did.

Pixels kind of cap out functionality wise. So layers gets, takes off and it starts to go. And it starts getting into now the mobile age where we see object oriented programs come around. And most people will probably remember fireworks as being one of the first mainstream versions of those. There have been some others, but fireworks was really the one that captivated people the most. And so fireworks had this object mentality. So it was doing everything that you could do with layers and with pixels, but it was now with objects. And now with objects, you could have things like a corner radius that was a value or how many points of a star do you have, and you can adjust it all the time. And so fireworks goes, it kind of caps out a little bit, but Sketch comes and replaces it when Adobe, know, disbands fireworks. Sketch was there to kind of take over the reins, and then Figma was right after that. So we get this like nice progression of all these tools taking objects and really doing amazing stuff with them. So Figma now has like auto layout, and you can like very, you know, put variables and start to do all kinds of behavioral things with the objects themselves.

So for that to work, have objects that have to do everything that layers does and everything that pixels do. But I'm of the opinion objects caps out. Objects can only get you so far. And we even see today that people are trying to make objects behave like what I think is coming next, which has been the holy grail for a long time. I don't think it's the end, but I think it's the next progression, and that's components. So rather than having objects try to mimic and behave like components, you should just have a component. The problem is that components need to do everything that...

The problem is that components need to do everything that objects do and layers do and pixels do before they become useful and they can do stuff. So that's what Selden's about. We're building our entire model based off components, which I think is the next natural evolution of how this works. And the trick for us is to make sure that we can get components that feel as fluid as objects do in the same way that Figma and Sketch had to learn how to make objects feel as fluid as layers did in Photoshop.

Andrei Herasimchuk (38:51.319)
That's the main trick there. Once you have components, components have all kinds of unique things that are super useful, especially in the AI era. They have semantic kind of notions. What I mean by semantic is that a component inherently has a role that it's trying to fulfill in your layout or in your project. By having a role, it has to, you you have to kind of describe what the role is. Once you do that, the LLM is really good at processing language and intent and things like that. So now your AI interfaces and approaches can really supercharge what you're going after. The challenge with components is that you need a lot of them. You need a lot of things, a lot of different iterations. You need people to be able to redo them in different ways. They need to be flexible enough to have variations and variety, but still have enough guardrails that they don't break and they're not just basically a collection of objects that are stitched together. So that's gonna be the challenge there, but that's what we're doing at Selton. I see the natural progression going to components and working with components in the next five to 10 years will be like people today saying, why are you using layers? You wouldn't use objects. Why are you using layers for this? Layers can't do this stuff. If you're using components at some point in the future, you'll be looking back and like, why are you doing this with an object-based thing? It doesn't do all the things you need it to do. And that's not bad. It's just, like I said, to me, that's just the natural progression. And I've been lucky enough to see the entire progression over 40 years.

---

Ridd (40:14.977)
Can you talk a little bit more about what it means and what it takes to create components that feel fluid? Because I think some person, probably many people were listening to this, they hear you talking about components and they're like, yeah, that's the thing that I insert and then immediately detach because it doesn't do all the things that I want.

Andrei Herasimchuk (40:30.70)
Yeah, so There's a couple of things there I think the first thing to do is a little bit of a preface if you look at video games video games and people who build worlds today use like I think they they generally call them design kits not design systems and I like the word design kits better I think that's a nice progression If you're building a world like Hogwarts legacy or you're building like spider-man 2, you know ones in the city and ones in a fantastical, you know Scottish landscape

You have all sorts of things you need to be able to deal with. The rooms, the furniture, the clothes, the trees, the banners, the cars, the bridges, the buildings. All of these things require it. And it just takes time to build that up. So what happens is, what I'm trying to get at is that at the beginning stages, you need your components to just be built, basic building blocks, kind of like Lego. So in that instance, a button is a building block. Building a button so that it can do all the variations that you'd wanted to do to do from a designer's point of view is actually not that hard. It's kind of a solved problem. That's one of our first components that we've got, for example. And what I mean by doing what you want it to do, I literally mean whatever corner style you want to, whatever border style you want to, whatever gradient, whatever like make it pulse like the old Mac OS 10 like lickable default buttons did. All of those things are totally doable and are solved problems, I would say. They're not rocket science, they're just tedious. They're super tedious. But once you've done them, now you have all of this expressiveness in this component. And if you haven't, the people can take the code base, fork it, and make another version that finishes the things that they don't want. So that's the first step is that once you get all these building blocks that have the richness, now you need to go to the next level. If you're building a world, they started with how do we get trees? Like how do we get these trees doing things? We have to build a good tree, and then we have to build all these variations of trees. And building the variance of trees, then procedurally being able to manipulate them so that you now have something that looks like a forest in a video game took some time.

So part of it is that it's just gonna take some time to get to the kind of richness that we need with components. At the same time, however, the issue with components is what you kind of bringing up with it, is that it doesn't do what I want it to do. That to me is, that to me generally speaks to a notion of a component that needs to be more bespoke. When you get into more complicated components, this is the easy way for me to describe this is let's talk about maps.

Andrei Herasimchuk (42:56.692)
So if you have a map, maps have all kinds of markers and things like if you're just doing a general map, the ability to have a component system and a component model that has the map, it has all the controls, all the things that you want to do, you can move them around. All of that is actually pretty straightforward. What's hard is like the way Uber wants to use the map versus the way Google Maps wants to use the map. And what I mean by that is in Uber, they have to have a car that's driving, has a line or a bicycle or whatever it is that's delivering you your food. You need to be able to see what's going on. That's the part that gets really hard.

In the case of Google, maybe the map is like doing 3D and swapping to other pieces to show you how to walk around a city, for example. Those get difficult. But the foundational pieces around them are still roughly the same. So when you're building components, the challenge for us is going to be, how do we get to a level of richness that we know how to stop? Because no matter what we do, people are going to need to do unique bespoke things anyway. And then the challenge there is how do they integrate their either design, their behavior or their code into the component that does everything else that they need. That's gonna take a little bit of time, but that's not a problem that I think is unsolvable by any stretch of the imagination. It's just gonna take some time. So we're starting with all the easy stuff, the stuff that I would call the 80 % stuff, the stuff that is like a nav bar, a product card, a list, a sign-in form. These are not things that are super difficult to do from a component point of view, but the richness is gonna take some time. Does that make sense?

---

Ridd (44:23.431)
Totally. And this level of like the 80 % components, is that something that you are building and giving people out of the box when they start to use Selden?

Andrei Herasimchuk (44:33.706)
That will be the intent, yes. So how they use it is still something we're working through. Largely, we're probably gonna package these up as code components and code libraries for them to be able to integrate with, but we're still playing with that notion. There's a bunch of things that we have to work out through, not least of which is security or data leakage, because we're actually, since we're using AI to manipulate these things, we gotta make sure that the data leakage doesn't happen too much where if you're an Airbnb, you're using it you don't want somebody who's your competitor say make this look like Airbnb it's like no no no no no that's that's good you got to watch out for that that kind of thing so so yeah so we intended to be out of the box but some of it early on is going to be probably even more straightforward like easy example is like a social media streaming app no offense to blue sky it's a great product but design wise it's not it's nothing new right it's pretty straightforward truth social i don't fine trumpeting, but he's able to make it because the design patterns on it are really straightforward. Twitter and threads, they're all following the same patterns. And the stuff that they're following is not by any stretch of the imagination difficult to do from a component point of view. That's what I'm kind of getting at.

---

Ridd (45:45.32)
Yeah. You mentioned the code piece. Can we talk about that a little bit? Because when I hear you talk, like one of the things that makes components particularly interesting is that it does kind of force designers to play in the playground where developers can build their designs really, really easily. So how do you think about the relationship between like this next phase of tooling as it relates to the actual code base?

Andrei Herasimchuk (46:10.762)
Yeah, so there's two parts to that. One is that we are not doing what I think would be a mistake. We are not, I don't want to say that too strongly. I'll just say it because it's my opinion. I don't think what Flutter is doing is the right thing. I think the idea of trying to make everybody do one drawing engine and one viewport, one whatever that is, is not fair. It's not right. And it just kind of leads to janky stuff. don't mean as smart as folks are at Google. I don't think Flutter is a good call personally. It could still work and it's great. That's fine. So what we're doing is we are doing a process. give them, I've given a talk about this five or six years ago and effectively what we're doing is we're following the notion of a schema. So when you're doing a design, what you do is that you want to design something agnostic or abstract of any specific platform out of the gate.

When you're doing this. And then you have like, what do I call a hero design? So you get this whole hero design where I think most designers make a mistake is they'll make a design and then they'll make another design and then they'll make another design starting from scratch. What we do and what I tend to do for a lot of things that I've done is I tend to find the hero design and then start to find the exceptions and whittle those away. So you whittle away this stuff here has to be native on iOS because if it's not native, It's going to not feel right. It's going to be janky and jittery. It's not going to have the right, you know, rendering of the, the, of the icons and fonts, the way that Apple has done. Therefore this part has to be iOS native. Over here, that difference is maybe a little bit less. So it's, it's a little bit less over here for, I don't know, I, Android and over here for Flutter or for React, it's, you know, even a different set. So once you have those differences, you then go off and you make components and libraries that are actually native to those platforms.

So what we're doing is we're making schemas that design the components and then we're doing the native stuff natively and we're building all the code natively quite frankly. So, but the design choices that need to be made, we are then going to be showing and offering ways to the designers and people in this like, look, this drawer is a native iOS drawer. So therefore it's going to behave a certain way. You should not expect this to work on Android the same way, but with AI, you can also do kind of cool things like find the components in our system.

Andrei Herasimchuk (48:30.165)
That would replace it in the best way that people find works just as good as the native iOS drawer if you want to do this on Android. Stuff like that is where we're get into. So the first thing to do is to know that you have to make everything native. We are doing different code bases for all the components that we're doing. We're not just making one code base and we're not doing just React, although React is the easiest one to do for a variety of reasons. We're going to be doing all of those. And then the second thing to do is to not start from the bottom up on all the components. What you do is you start from a hero design that is agnostic of anything and then you find the differences and you'll discover if you're really really diligent and really precise with this kind of kind of thing you will discover that those differences aren't nearly as big as you thought they were and when you when you're really good with this this allows you to have a high quality component system across all the platforms that aligns really well and the parts that are different will be different because people using the iPhone or an Android phone it'll just feel normal to them it won't feel like it's been ported

And that's why I think the Flutter thing might be a problem. Maybe I'm wrong about how Flutter is actually executing at the engine level when it draws to a screen. But when I look at it, I feel like they're trying to force everybody into a one road thing. And I kind of like the fact that iOS and Android are different. I kind of like that the web is different than these other. I like the contrasting of things. It's a pain in the butt as a designer designing these things across systems. But back in the day, you're struggling with iOS, excuse me, with Mac OS and Windows. And those differences were different.

But the differences are kind of needed. They keep things fresh. They keep competition going. You know, kind of want that. Yeah, sorry, that's a long-winded way of answering that.

---

Ridd (50:04.707)
No, that's good. You've mentioned AI a couple times through the lens of helping you with some of the behind the scenes operations that you're performing, but how does AI fit into your product strategy for like the actual authoring experience in the tool?

Andrei Herasimchuk (50:21.876)
Yeah, so basically the thing that we're doing is we're not building an app that says, make me a dog walking app and then you get a magical app or make me a weather app and it just does it for you. I don't find that interesting. I actually find it of dystopian. And the idea that you're to replace humans at that level just feels bad on all levels. If it ever happens, I'll likely be dead. So good. I'll be too old. It's going happen way well. I will not be old enough for that to happen. So I don't have to worry about it.

But generally speaking, no. So when you go to component model that I'm talking about, when you do components and use components as your base system over objects, like I said, components have inherent behaviors. They have inherent things that they're doing and they have semantic value. Like a button is like in the web world, a button could have been a link, like an a tag styled to look like a button. And we used to all these problems with people using links or divs that on click events with JavaScript, or then the button tag came out and like, do I use this? And there's all this kind of like muck of that. Well, a button heuristically speaking, at a schema level, it's a button. We know that it's got semantic value. It's going to do this thing. It behaves like this. I can describe those behaviors in English and in language, not just English. I can describe all that in our component model. So all of our components have what they're supposed to be used for, why they're there, what's the good things. And we can have the folks in the LLM also annotate more information onto them about what's working, what's not working.

Et cetera, et cetera. The AI, in my opinion, that we're building is one that is using all the richness of the data to help you find the solutions that you're looking for. Not to find a solution outside of you, not to find a solution in this random pool of solutions that I could have picked from. But literally, I am trying to do this. This is my intent. This is what I want to execute. What is the thing that I need to do that with? And it will find that for you and put it there for you. You're... If you were looking for solutions with components, you can now say, need to mix these up in a way that behaves a certain way. And because all of this is kind of like in a language of schemas and components and intent at the kind of description level of our components, the AI is very good at going through things and finding stuff and then helping you figure that out. So the way we talk about it for Selden is that we've kind of got three levels we're doing. We're doing a creation level, a control level, and a code level.

Andrei Herasimchuk (52:42.696)
And when we say control, we don't mean copiloting, just we mean control. If you want to do something, you can do it. If you want to change all the cards to be something else, you can just tell it to do that. If you want to change the color of buttons by typing in, you can do that. You can also just point and click and do some things with point and click and some things with speech. On the creation end, we've got sketching working. So if you sketch, pop it in, it'll create your components from the sketch.

That's the way designers like to work. That's the way I like to work is I like to work with whiteboards and notebooks. But if you're a product manager, you can just describe it to it. Some people are using prompting to like describe things, but we're saying like drop in a whole PRD, a whole product requirements document, combine it with a couple of sketches and then take the research data from the spreadsheet of data that researchers are using and doing, combine all that up and the AI can process all this. like, okay, it looks like this is these are the components that are going to address this problem. Are these the ones you want?

Here's like five suggestions. You pick the one you want and it drops it in. So we're using the AI to do that. On the code level, we're using the AI to smartly configure and manipulate how these properties and schemas are interacting to find the solution that needs to go into your code base. A lot of AI stuff that I see these days is write me the code. And I don't find that super interesting. I I guess it will be interesting in long ways, but there's a long road to go, a long road to travel.

To get the AIs to write code that over iterations is consistent enough that you can do the correct differencing, that you can track the decision-making process. Right now, we don't understand the decision-making process that an AI does. Whereas if you have a human being doing the code from version to version, it may not be the best code, but at least they can tell you, like, I did this, and I did this, and I did this, and here's why. That's going to be coming in AI at some point, but it's not here yet. And so when you see all these apps out there writing code, my first reaction is like, great for a one-off, but is that going to work for 10 versions over time?

I don't know, maybe it will. What we're doing is we're using AI to control the schematics and the kind of combination of all these things to then be able to write out the code that you need. And when it writes out the code, the engineers have to review it before it goes in. It has to be treated as if it's still part of team. So for me, AI and the way that we want to use it is about intent. I say it's like parsing human intent. We're not looking to replace people.

Andrei Herasimchuk (54:58.698)
I'm not looking to have AI be this magic genie that just gives you whatever you wish for. I think AI is really interesting when you have components that have behavior and intent and all this descriptive stuff with them, pairing that with AI and human being, a human being with AI, I should say, and then letting them really find all these kinds of interesting, crazy solutions in the system. So that's what I think about that.

---

Ridd (55:25.305)
There's so much about design tools now that is familiar. You have your layers on the left, you have your properties on the right. If we're going to move from this layers paradigm to components paradigm, how do you think about the right level of familiarity to capitalize on versus where it might make sense to really think outside the box and innovate in order to reach the ceiling of what a component world can create?

Andrei Herasimchuk (55:52.232)
I was hoping you would not ask me that question. No, we can. That's a good question. It's a tough question. So the answer to that question, truthfully speaking, is that even with Selden's first editor that we're going to start showing people very soon here, we have objects on the left, a hierarchy on the left, and property panels on the right. It's just like, and that was done specifically because I want people who are starting to play with it to have a familiar base to kind of start from.

I've told the team we cannot spend a lot of time refining and honing this interface because that's a solved problem. We can solve those problems later and fix those bugs and make some of the interactions work better. That's actually really straightforward. I've done that multiple times. That's kind of like my wheelhouse. I know how to do that easy. What's hard is that AI is a paradigm shift in the same way that like I said about the pixels to layers to objects to components migration and evolution, AI is the same way in that the mouse when it came out to manipulate and draw pixels on a computer screen was an entirely new interaction paradigm. It's like, I've got this thing I can hold my hand and I got buttons and I can press and click. And if I press and hold it, I can drag and paint and all this other kinds of crazy things that had never been dealt with before that time in personal computing. Nobody knew what it meant.

And so it took a lot of apps to come around. If you go back and look at early painting apps, they were all different. They all had different approaches. It was crazy. They had some familiarity, but nobody knew what they were doing just yet. If you look at Multitouch, Multitouch was the same thing in the mobile era. Multitouch was a new paradigm. How do we use it effectively? Well, one of them was like, know, pulled a refresh, came out of Twitter, and that was a new paradigm.

That doesn't come around with the old tools. need to be touching the screen and that feeling of pulling and all of that stuff comes around. There's lots of examples of what's happening there. AI is about to do the same thing. AI is a paradigm shift. And we're using it in a way right now that is kind of the same that everybody else is using, which is in the way that you would use it in a design tool.

What I'm looking for is the tools that we've been thinking of and the things that I want to play with is going to come in a little bit once we have more of the foundation and the structure in place, which is what does it mean to be able to have any analog input, sketching, word documents, text, your voice, data, spreadsheets. What does it mean to have all of that in the mix while you're also manipulating all of these things in the way that you're used to?

Andrei Herasimchuk (58:34.923)
What kind of new tools do you have there? What kind of new interaction paradigms do you have? Like as you drag a product card on the screen, does it auto reflow like it did in the Figma and the FigCon example, config, excuse me, not FigCon, config, where they resize, you see a lot of apps doing this, where you resize a component and it just fills in data. That's an easy one. But what if it does it in a way that is literally, I don't know, offering contextual suggestions based on what's around it to offer the right kinds of data models to explore and play with. So it's looking at the context around you. So it's doing a vision model around the whole thing as you're drawing and creating this thing on the screen. We need speed, optimization, all kinds of stuff to make that work. But there's a whole other world of stuff that's about to happen. That's a new paradigm that none of us can think of. And I think anybody who says they know what it is is just flat out kidding themselves.

But that's what makes me excited about doing this. It's like, great. I've been lucky enough to go through pixels, to layers, to objects, and now to this thing I think is coming, which is components, which has been happening for a while now. This is great. This is why I still get excited about this business, even at my age. Who gets to say that they spend like 30, 40 years working on something where it's different every five years? Because magical things occur out of nowhere. I've been lucky enough to say that and had been lucky enough to be in the trenches working on it. That gets me excited. So yeah.

The answer to your question is that who the hell knows? Who knows what's going to happen? What's the new paradigm? But that's what excites me. I don't want to be in this old world that even I helped create, is like, know, layers on the left and properties on the right. I know how to do that. I want to do the new stuff. I want to start using this and my voice and all kinds of things in unique ways. know, one of my favorite movies is Blade Runner. You know, that whole thing with Blade Runner is like move to the left and zoom in look around the corner. How's it looking around the corner? It's a camera. I can't see behind.

But yeah, I can. Like there's all these kinds of things that are starting to happen now that are I think are exciting and a little bit scary to be honest with you. But that's the that's the part that I look forward to. So I hope nobody knows what the answer to that question is yet because I think we should give ourselves space and room to play for the next couple of years while it's still we have the ability to.

---

Ridd (01:00:55.088)
Let's talk about a little bit more future facing things and zoom out for a second. Cause you wrote something earlier this year. said what is coming is a simple change, but one that might blindside you if you're not ready for yet. Can you talk a bit about what you're kind of seeing and thinking when you're looking at the future?

Andrei Herasimchuk (01:01:11.798)
Is that the article that I wrote on LinkedIn that got a, Yeah, I was just, was a friend of mine had asked me to take a look at some AI stuff and I did, and I hadn't looked at it in a while. So I was like, whoa, this has gotten much farther than I remember it from like 2017. So I wrote the article on LinkedIn. It was a little bit of a post because I had just encountered it. And it's actually the article that kind of kicked off Selden for me formally. What I see coming is a world that's going to evolve in the same way that I think graphic design evolved. So graphic design used to be commercial art. it was like, notice commercial art. The world of it was a very fancy, lots of illustrations, lots of bespoke type, all these kinds of things where the craftsmanship behind it was pretty high. If you go back and look at the old ads from like 1910s and 1920s for like Coca-Cola, they're like stuff I would hang on my wall. They're pretty amazing.

Standardization comes around, all these kinds of things come around. The mechanical process evolves better, printing processes evolve better, and over time, you get what we know is graphic design today, effectively. In that process, I think what happened there is not an exact match, but it's kind of a... It's reminiscent of what I think is gonna happen to our design field. And I mean our design field. I mean the one that people, UI, UX, product design, whatever people call it these days. I still consider myself like a digital product designer and I have for quite a while. But what's gonna happen is similar there. So what I mean by that is that as things evolve and get more mechanical, as these processes get evolved, if components take off the way that I think they're going to, what you'll see is a place where people who design the themselves, the buttons and the cards and the calendars and all that stuff, will become similar to what is in graphic design as a typographer. So if you're doing graphic design, you don't design all the type. I mean, some people do, like Dan Cederholm does, and he does a great job, in my opinion. But that's to consume your life, because designing typography and designing a font is a huge amount of work. There's a massive amount of work that goes into that.

Andrei Herasimchuk (01:03:32.372)
All the details, all the characters, all the language, the hinting, the sizes, everything has to be like thought through. And then you have like all the different styles, normal to bold to italic to whatever. I view the designing of a font and the level of craftsmanship that that takes to be what's going to happen when we have components. If that happens and that is true, if that becomes the thing, what you'll then get is a sliver of people who need to work on that in the same way that we have a small amount of people who are typographers in the graphic design business. You don't need million typographers. You only need like, you know, 10,000 really good ones. And so you'll get component designers doing this sort of craftsmanship and they'll become more like design engineering. So you get engineers and designers kind of working together and blending into one where you'll get this thing. I've heard design engineering and I kind of use that term in the article, design engineers, which is the only thing I can think of. If that happens, now you have a problem in the way that this works because now you don't need everybody working on the buttons and the cards and the maps and whatnot.

They're just there. So I think if that happens, the business that we are now is going to split into two. We're one type of designer who tends to be more business oriented, more customer oriented on the problem side of the fence, who enjoys more of the, the, the reasons why product exists and more of the branding aspects and more of the, the way this lives in the market, those kinds of stuff. They're going to go off and probably become more kin and join the field with product management, or product marketing management. They're going to start to blend with them a lot more.

On the other side, I think you're going to see the people who are far more interested in the more quantitative aspects of design. Like, does this work? Are people using it? Why aren't they using it? What's the actual problem that the human being is having at this kind of practical, pragmatic level? And that's, think, where a lot of UX people tend to live these days. They tend to live in that world. And they're going to go off and do that. Because what you'll have in the middle is people designing the fonts, the components. And then the design field will split.

Kind of the same way in graphic design where you'll have people who are art directing or doing more of the larger aspects of the branding and you'll have more of the market research people trying to make sure that the message is landing, that the market is correct. They're going be understanding how people behave inside the communication. And you're going to have like these specialists in the middle who are doing like the photography, the illustration, or in this case, the typography. And so I think our field is about to split. And I was trying to warn people like, look.

Andrei Herasimchuk (01:05:54.248)
I think this is coming and it just makes sense. don't need everybody designing the buttons. You don't need everybody designing like the mechanics of these things. It's just, maybe I'm the old guy, but it's just a waste of time. You should only do it if you really care about it and you know all the details that go into what it takes to make those things. Not just like, I like this way this looks and therefore that's the design. That's not good enough. And it's not gonna be good enough going forward. So if you wanna do that, you should start to learn behaviors code, how these mechanics work, how all this stuff works under the hood. Otherwise, I think you're going see our field split off and become more product oriented or more research and UX oriented. And that's fine. I think that's a good thing. In both those worlds, my hope is that we'll finally get back to designers solving problems, the people problems, the product business problems, the two of them working in concert together versus sitting in rooms arguing about whether the red is the right color or the button corners are rounded.

Which I've been in way too many meetings, even at my level, to be like, what the hell is going on here? Why, I've got like 10 people in a room. This meeting is costing the company like at least, you know, $50,000 in time. And we're talking about the corner radius. No. Everybody out. Go solve problems. But I do think that that's what's going to happen is that that split will allow us to finally get back to solving people problems and getting more honest about that.

That's going to be super disruptive if it happens. It's going to be super disruptive.

---

Ridd (01:07:25.79)
Does that split mean that software products moving forward will probably become a little bit more homogenous? And in that world, like where do you see the opportunity for creativity? Because I think there's someone probably listening who's like, gosh, I want to be able to like, you know, add soul to my design and make it unique and look different and all of this stuff. And I guess I'm wondering how much of that exists in this type of world.

Andrei Herasimchuk (01:07:54.687)
The same thing that your art teacher taught you when you took typography class. Like you get one font, make a poster. You get massive amounts of creativity from young designers who are just not learning how to do this from the same typeface. They learned to start to see, the typeface can do these things. It can be expressive in different ways. I can do things like make negative space into the letters and have like little hidden symbols. I can be creative about the layout and what it means to have the breaks of letters read a certain.

I mean, there's like all these other unique things that you can do, which I think are far more fun to play with as a designer and far more interesting to use and solve being in the trenches. So my hope is that it'll be the same thing. Like people will see this split that they'll get back to what being a designer is actually about. It'll be a lot more fun. It'll be a lot more like, how do we solve these problems with these things now? If they want to get expressive. So, so to that point though, does the components themselves have to be rich enough so that they can be expressive in those ways? That is one of the challenges. So it's not like, here's a calendar, you're stuck. No, like, here's a calendar, here's all the things you can do with it. It's got like a gajillion levers and things like that, which are all crazy. The AI can help you like play around with these levers and see different configurations. You can try all these different pieces out. Maybe you want the header of the calendar to have a background animation of the weather of the day as it's occurring. There's all kinds things you should be able to do.

With those components. It'll take time to get to that richness of it. But the point is that when the components are rich, then you can now use the component to figure out what you're trying to solve and how you want to solve it versus how does the engineer actually code this thing, which is, know, we've done this work and we've never done this calendar before. And we got like 60 % of it right, but this 40 % is now not allowing us to change the colors of today to be a different color. And therefore how do we solve this? Like all of those problems are not useful problems. They're like, they need to be solved once and we all need to move on.

And that's my point. The components have to get there. So this is not happening until the components also get there. But I think it is coming.

---

Ridd (01:09:57.043)
Before I you go, we get a little bit of a glimpse and like, where are you at right now in the Selden journey and what are some of those next milestones look like for you?

Andrei Herasimchuk (01:10:04.854)
Yeah, so right now in the next week, next couple of weeks before the end of the year, we're going to release a couple of content videos and a few videos to start getting people's opinion. I want us and the team to design this out in the open. And so I've shown a few people what we're working on and how we're doing it. And we've got the process started now. So over the next couple of months, we want to engage with people to show them what's happening. Now, having said that, it's still really early days. There's still only certain things you can do.

But we're looking to get that kind of feedback. Once we get the site up and running, it's been taking a little bit too long, but that's the nature of the beast. And once we get the product to a point where we can actually let people play with it more, we're gonna start asking for people to sign up in email accounts. Because of the nature of this tool and because of the nature of AI, I can't just open up the floodgates and say, hey, everybody play with this because AI tokens and AI calls cost money.

Until we solve that problem, we can only take a few people. So we'll be looking for people who are really interested in helping us do a deep dive because we need them to play with the AI as well too. And we need to, we're obviously gonna pay for that upfront for now. But that's the next steps is to get people out in the open and start having the discussion. I do want us to build a tool that is this evolution that does go to this next level. And I don't want this to be dumped on people. I think a lot of companies doing this right now, I think a few of them are just dumping these AI things on people.

And they're doing it because they're excited about their product. They're excited about AI and they're excited about what this means. But I kind of want them to be careful and take a little bit of a hold back because some of the messages, some of the messaging that's coming out is like, you don't need designers anymore or, you don't need engineers anymore. And I don't think that's what we want to do. We are looking to build a tool with the community and build a tool that everybody can use as the next progression. So we'll be bringing people on board who can help us with that. I'd love to let 10,000 people play with it. We probably only have like a hundred.

So we'll be doing that and getting that process started. So keep an eye out on our website, our socials. We have LinkedIn pages coming up, the YouTube page. I'll be doing more videos. The team will be doing videos. We'll be providing content and hopefully, not hopefully, but pretty much by January of next year, we're going to be opening this thing up and getting lots of feedback from folks.

---

Ridd (01:12:21.199)
Anything else that we're not talking about that is on your mind that you wanna bring up before I let you go?

Andrei Herasimchuk (01:13:06.195)
I think the one thing that I would say that is happening that I, I don't know what to do about it. And I'm actually curious what people think is this notion of stuff being by stuff. mean, software features, all of these products, all of these things just being tossed out there. And right now everybody in the community is trying to figure out what it all means. And I, I really, I'm bummed about that. I'm kind of disappointed by both the software makers and those of us in the trenches and those of us who've been around for a while, the people my age and who've been doing this for quite a bit, that we're not doing more to have open conversations about what this stuff means and what it looks like. Progress is going to happen. That's just the way that the world works and that's just way that it is. It does not have to happen out of our control. That's the part that I feel like needs to be a little bit more loud.

You shouldn't be out there. And by you, I mean, people in the design space, it's not healthy for you to, AI is not good enough as a human being, or AI is silly for this, or, you know, all of our jobs are going away because AI is going to be good enough to replace us that those things aren't in my opinion, super helpful. And I want to see more from the community and mostly also from the companies and from the people doing this stuff is more honest conversations about what does it mean and what could it mean.

Cause we need to start understanding what it could do and start making sure that we push for that. Like for me at Selden, I am pushing pretty hard that we are not about make me a dog walking app or make me a weather app. That's not what we're doing. We're not saying type a prompt magic. I mean, we could, I could make a lot of money doing that. I don't find that interesting. I have been a designer for a long time now. And I enjoy making tools. consider myself like a guitar maker at this point. I like to make tools and I love to see what people do with them. At any point in time, we let the companies or we have these conversations where we're basically absconding our voice and our power to, this is just going to be dystopian and replace us all, is a missed opportunity on our part. Because the way you make sure that that stuff doesn't happen is you speak up about it. You don't yell about it, in my opinion. You don't deride it, but you just say like, okay, if this happens, does this, does this mean that this is happening? And you just ask people honestly, does this mean that? Would it mean this? Could it mean something else? And get into like these back and forth conversations with the companies and the AI makers to make sure that, you know, you're not powerless. You got us, but you got to speak up, but you can't yell. In my opinion, yelling just does nothing. That just turns everybody off. And, but that's the thing that I would love to see the community embrace more of is like, okay.

This is happening. You know, back in the graphic design days, desktop publishing, this is happening. All the old typesetting stuff went away. All the old processes went away and you either evolve and mature with it and grow with it, or you fight it and you make yourself stressed out and unhappy in the process. This is happening. This is going to change things and we need to make sure that we, it doesn't happen to us. It happens with us. Basically.

---

Ridd (01:16:29.999)
Before I let you go, I have a one-off question here. And my goal is to kind of tap into your experience designing and leading design at some of the most prominent companies in the world. What's a trait that you've noticed in some of the best designers that you've worked alongside over the years?

Andrei Herasimchuk (01:16:49.87)
That's a great question. What's the best trade? So it's actually one that I don't consider myself very good at. There's a level of understanding how much story to tell and how much story to show before not doing that anymore. So what I mean by that, if you show too much or you tell too much story in the attempt to sell the idea to a client or sell the idea to the executives or to get approval for the roadmap that you're planning out, etc. If you do too much, you set yourself up for failure down the road because invariably things are going to change. As I like to tell people when they hire me, it's like, well, this is what we want. This is what we're doing. What do you think? Is this what we're going to get? And I'll be like, sure, maybe. And they're like, what do mean maybe? This is what we need. This is what we're to get, right? I'm like, we'll get something like it, but if I had the design, it would be shipping and we'd be done. And therefore I wouldn't be needed. So there's a process in place that has to happen. A good designer understands that that process is going to change things because if it doesn't, then you're not really, you're just basically a cookie cutter person. You're not really solving problems. You're just solving, you can only solve problems that your cookie cutter process allows you to solve.

Good designers understand how to tell enough story, but leave themselves wiggle room so that when it changes invariably down the road or during the process, at the end of it, they're not stuck with an unhappy executive customer, whoever. So showing too much often leads to engineers who have the same expectation. So the best designers I've worked with or managed have always been good at telling an inspiring story, showing what's possible, but not showing what will be, only showing what could be and enough in there that when they get to that point, they know enough about what they really, really want that when they get to the end point, it will actually resonate. And then people connect the dots like, yeah, six months ago, this is exactly what we wanted. And you show them the thing from six months ago, it's like 20 % the same. That's a good designer. A good designer knows when to show enough and tell enough and when to stop.

That's a skill that I don't know if they teach in school. It's a hard one to learn. It's really one of those ones where you have to put yourself as a designer in positions where you are forced to deal with it. So if you are at a company where they want you to give the presentation to the company or they want you to give the presentation to the team, you should use those because those are your opportunities to learn how to tell the story, but also how to tell just enough of the story so that it's inspiring and not going to hurt you down the road as well as show enough of the story.

Andrei Herasimchuk (01:19:49.49)
Such that you can also change and modify things along the way. Outside of that, I think the other ones are just really good at having a thick skin. The worst part about our job is that it tends to be very visual. It tends to be very visceral in many ways. Engineering code is performant and it does things in certain ways when you're engineering stuff, but there's no visceralness or emotional attachment to an algorithm per se, unless you're an actual engineer.

Ours people can see and touch and play with. And you know, everybody's got an opinion and you just gotta just ride with it. And you should know that everybody has a right to their opinion and that's fine. And you gotta just roll with it. I can't tell you how many times people tell me the stuff that I've done is like awful. It's like, yeah, now it'll be better later, but you know, I'll keep iterating. Yeah, thick skin and the knowing just how much to say and just how much to show.

---

Ridd (01:20:47.287)
Well, Andre, thank you so much for coming on today and just sharing some pretty awesome stories. Like I was definitely just smiling and super engaged listening. And it's really, really cool to hear about your journey, what you're thinking about, what you're working on next. I'm excited to see where you take it. Best of luck.

Andrei Herasimchuk (01:21:01.568)
Yeah. I can't wait to show the world all this stuff we're working on. It's gonna be a lot of fun. It really is. And I appreciate your time and all the questions as well too.